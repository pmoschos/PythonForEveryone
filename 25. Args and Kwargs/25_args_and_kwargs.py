# -*- coding: utf-8 -*-
"""25_Args_and_Kwargs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13aVQrEScIIny8yu1MqEt9wJ-XVbyKQDo

# Understanding `*args` and `**kwargs` in Python in Python üêç

In Python, `*args` and `**kwargs` are used to pass a variable number of arguments to a function. They allow flexibility in function calls, making functions more adaptable to different scenarios.

### What are `*args`?

- `*args` allows you to pass a variable number of non-keyword arguments to a function.
- `args` is just a name; you can use any name prefixed with a `*`. `*args` is the conventional name.

### How `*args` works

When you prefix a parameter with `*`, it collects all the positional arguments passed to the function into a tuple.

#### Example:
"""

def greet(*args):
    for name in args:
        print(f"Hello, {name}!")

greet("Alice", "Bob", "Charlie")

"""
Output:"""

Hello, Alice!
Hello, Bob!
Hello, Charlie!

"""
In the above example:
- The `greet` function accepts a variable number of arguments.
- Each argument is collected into the `args` tuple.
- The function then iterates over `args` and prints a greeting for each name.

### What are `**kwargs`?

- `**kwargs` allows you to pass a variable number of keyword arguments to a function.
- `kwargs` is just a name; you can use any name prefixed with `**`. `**kwargs` is the conventional name.

### How `**kwargs` works

When you prefix a parameter with `**`, it collects all the keyword arguments passed to the function into a dictionary.

#### Example:
"""

def display_info(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")

display_info(name="Alice", age=30, city="New York")

"""
Output:"""

name: Alice
age: 30
city: New York

"""
In the above example:
- The `display_info` function accepts a variable number of keyword arguments.
- Each keyword argument is collected into the `kwargs` dictionary.
- The function then iterates over `kwargs` and prints the key-value pairs.

### Using `*args` and `**kwargs` together

You can use `*args` and `**kwargs` in the same function. When doing so, `*args` must appear before `**kwargs` in the function definition.

#### Example:
"""

def display_all(*args, **kwargs):
    for arg in args:
        print(arg)
    for key, value in kwargs.items():
        print(f"{key}: {value}")

display_all("Alice", "Bob", name="Charlie", age=25)

"""
Output:"""

Alice
Bob
name: Charlie
age: 25

"""
### Practical Examples

#### Example 1: Function with `*args`
"""

def sum_all(*args):
    return sum(args)

print(sum_all(1, 2, 3, 4))  # Output: 10

"""
In this example, the `sum_all` function sums up all the positional arguments passed to it.

#### Example 2: Function with `**kwargs`
"""

def build_profile(**kwargs):
    return kwargs

user_profile = build_profile(name="Alice", age=30, job="Engineer")
print(user_profile)  # Output: {'name': 'Alice', 'age': 30, 'job': 'Engineer'}

"""
In this example, the `build_profile` function collects all keyword arguments into a dictionary and returns it.

#### Example 3: Function with both `*args` and `**kwargs`
"""

def introduce(*args, **kwargs):
    for name in args:
        print(f"Hello, {name}!")
    for key, value in kwargs.items():
        print(f"{key}: {value}")

introduce("Alice", "Bob", age=25, city="New York")

"""
Output:"""

Hello, Alice!
Hello, Bob!
age: 25
city: New York

"""
### Unpacking `*args` and `**kwargs`

You can also use `*args` and `**kwargs` to unpack arguments when calling a function.

#### Example:
"""

def multiply(a, b, c):
    return a * b * c

args = (2, 3, 4)
print(multiply(*args))  # Output: 24

def greet(name, age, city):
    print(f"Hello, my name is {name}, I'm {age} years old and I live in {city}.")

kwargs = {"name": "Alice", "age": 30, "city": "New York"}
greet(**kwargs)

"""
Output:"""

24
Hello, my name is Alice, I'm 30 years old and I live in New York.

"""
In these examples:
- `*args` unpacks the tuple into positional arguments.
- `**kwargs` unpacks the dictionary into keyword arguments.

### Conclusion

- `*args` and `**kwargs` provide a flexible way to handle a variable number of arguments in functions.
- `*args` is used for non-keyword variable arguments and collects them into a tuple.
- `**kwargs` is used for keyword variable arguments and collects them into a dictionary.
- You can use both in the same function, with `*args` appearing before `**kwargs`.
- They can also be used for unpacking arguments when calling functions.

Understanding `*args` and `**kwargs` is essential for writing flexible and reusable code in Python. They are particularly useful in scenarios where you need to pass a varying number of arguments to functions, such as in utility functions, decorators, and more.


### üì¢ Stay Updated

Be sure to ‚≠ê this repository to stay updated with new examples and enhancements!

### üìÑ License
üîê This project is protected under the [MIT License](https://mit-license.org/).

### Contact üìß
Panagiotis Moschos - pan.moschos86@gmail.com

üîó *Note: This is a Python script and requires a Python interpreter to run.*

---
<h1 align=center>Happy Coding üë®‚Äçüíª </h1>

<p align="center">
  Made with ‚ù§Ô∏è by Panagiotis Moschos (https://github.com/pmoschos)
</p>"""